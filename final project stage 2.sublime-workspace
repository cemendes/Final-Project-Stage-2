{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sample",
				"sample_changed"
			],
			[
				"Sam",
				"sample_changed_again"
			],
			[
				"dict",
				"dictionary_to_use"
			],
			[
				"dic",
				"dictionary"
			],
			[
				"mediu",
				"medium_dic"
			],
			[
				"di",
				"dictionary_to_use"
			],
			[
				"easy",
				"easy_dic"
			],
			[
				"hard",
				"hard_dic"
			],
			[
				"medium",
				"medium_sample"
			],
			[
				"sam",
				"sample_changed_again"
			],
			[
				"sample_ch",
				"sample_changed_again"
			],
			[
				"game",
				"game_level_guess"
			],
			[
				"__",
				"___1___"
			],
			[
				"choice",
				"choice_pos"
			],
			[
				"_",
				"___2___"
			],
			[
				"sampl",
				"sample_changed"
			],
			[
				"___",
				"___2___"
			],
			[
				"guess",
				"guess_count"
			],
			[
				"dc",
				"dic_sample"
			],
			[
				"level",
				"level_and_guess"
			],
			[
				"number",
				"number_of_guesses"
			],
			[
				"fill",
				"fill_in_the_blank"
			],
			[
				"fil",
				"fill_in_the_blank"
			],
			[
				"word",
				"word_in_pos"
			],
			[
				"greate",
				"greatest_number"
			],
			[
				"grea",
				"greatest_number"
			],
			[
				"list",
				"list_of_numbers"
			],
			[
				"count",
				"count_list"
			],
			[
				"rand",
				"random_list"
			],
			[
				"random",
				"random_list"
			],
			[
				"days",
				"daysOfMonths"
			],
			[
				"month",
				"month1"
			],
			[
				"co",
				"counting_days"
			],
			[
				"to",
				"total_days"
			],
			[
				"next",
				"nextDay"
			],
			[
				"years",
				"years_in_days"
			],
			[
				"year",
				"years_in_days"
			],
			[
				"dif",
				"dif_day"
			],
			[
				"is",
				"isLeapYear"
			],
			[
				"ex",
				"example_list_2"
			],
			[
				"prit",
				"print_all_elements"
			],
			[
				"ran",
				"random_noun"
			],
			[
				"mad",
				"mad_lib"
			],
			[
				"rando",
				"random_verb"
			],
			[
				"pro",
				"processed"
			],
			[
				"wor",
				"word_transformer"
			],
			[
				"b",
				"b"
			],
			[
				"n",
				"n"
			],
			[
				"ref",
				"ext_refs_and_backlinks_status_edir"
			],
			[
				"p",
				"part_sync_status_edir"
			],
			[
				"font",
				"font-size"
			],
			[
				"pa",
				"padding-left"
			],
			[
				"margin",
				"margin-right"
			],
			[
				"max",
				"max-height"
			],
			[
				"pad",
				"padding-left"
			],
			[
				"mar",
				"margin-bottom"
			],
			[
				"padd",
				"padding-right"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "easy_dic = {'___1___' : 'function', '___2___' : 'variables', '___3___' : 'None', '___4___' : 'list'}\neasy_sample = '''A ___1___ is created with the def keyword. You specify the inputs a ___1___ takes by\nadding ___2___ separated by commas between the parentheses. ___1___s by default return ___3___ if you\ndon't specify the value to return. ___2___ can be standard data types such as string, number, dictionary,\ntuple, and ___4___ or can be more complicated such as objects and lambda functions.'''\n\nmedium_dic = {'___1___' : 'world', '___2___' : 'python', '___3___' : 'print', '___4___' : 'html',}\nmedium_sample = '''A common first thing to do in a language is display 'Hello ___1___!'  In ___2___ this is particularly easy;\nall you have to do is type in: ___3___ \"Hello ___1___!\" Of course, that isn't a very useful thing to do. However, it is an\nexample of how to output to the user using the ___3___ command, and produces a program which does something, so it is useful\nin that capacity.'It may seem a bit odd to do something in a Turing complete language that can be done even more easily\nwith an ___4___ file in a browser, but it's a step in learning ___2___ syntax, and that's really its purpose.'''\n\nhard_dic = {'___1___' : 'class', '___2___' : 'semantics', '___3___' : 'methods', '___4___' : 'python',}\nhard_sample = '''Compared with other programming languages, Pythonâ€™s ___1___ mechanism adds ___1___s with a minimum of new syntax\nand ___2___. It is a mixture of the ___1___ mechanisms found in C++ and Modula-3. Python ___1___es provide all the standard\nfeatures of Object Oriented Programming: the ___1___ inheritance mechanism allows multiple base ___1___es, a derived ___1___ can\noverride any ___3___ of its base ___1___ or ___1___es, and a method can call the __3__ of a base ___2___ with the same name.\nObjects can contain arbitrary amounts and kinds of data. As is true for modules, ___1___es partake of the dynamic nature\nof Python: they are created at runtime, and can be modified further after creation.'''\n\ndictionaries = {'easy' : easy_dic, 'medium' : medium_dic, 'hard' : hard_dic}\nsamples = {'easy' : easy_sample, 'medium' : medium_sample, 'hard' : hard_sample}\n\ndef game_level_guess():\n    '''Asks the user for the level and number of guesses. Level should be easy, medium or hard and number_of_guesses should be an integer.\n       It will return level and number_of_guesses'''\n    exit_loop = 0\n    while exit_loop == 0:\n        level = raw_input(\"Please, select a game difficulty by typing it in! Possible choices include easy, medium, and hard. \")\n        if level.lower() in ['easy','medium','hard']:\n            print \"You've chosen\",level,\"!\"\n            exit_loop += 1\n        else:\n            print level,\"is not a valid level!\"\n    number_of_guesses = raw_input(\"How many guesses would you like per problem? Please enter a positive integer number: \")\n    while number_of_guesses.isdigit() == False:\n        print \"This is not an integer\"\n        print(\"\\n\")\n        number_of_guesses = raw_input(\"How many guesses would you like per problem? Please enter a positive integer number: \")\n    number_of_guesses = int(number_of_guesses)\n    return level,number_of_guesses\n\ndef check_answer(choice,choice_pos,sampleA,dictionary):\n    '''Check if the answer is correct. if true, it changes the variable using the dictionary. It will return sample_changed with the correct answered\n    inputed by the user'''\n    if choice == dictionary[choice_pos]:\n        sample_changed = sampleA.replace(choice_pos,choice)\n        return sample_changed\n\ndef fill_in_the_blank():\n    '''This is the main function. It will call check_answer and number_of_guesses as use its inputs. The output will be either the sample with the right answer\n       or it will ask for the user to try again.'''\n    guess_count = 0\n    exit_loop = 0\n    level_and_guess = game_level_guess()\n    dictionary_to_use = dictionaries[level_and_guess[0]]\n    sample_changed_again = samples[level_and_guess[0]]\n\n    print \"This paragraph reads as such: \", sample_changed_again\n\n    for n in sorted(dictionary_to_use.keys()):\n        while level_and_guess[1] > guess_count:\n            first_choice = raw_input(\"What should be substituded in for\" + n + \"?\")\n            if not check_answer(first_choice,n,sample_changed_again,dictionary_to_use):\n                guess_count += 1\n                print \"This isn't the correct answer! You only have\",level_and_guess[1] - guess_count,\"try left. Make it count!\"\n            else:\n                sample_changed_again = check_answer(first_choice,n,sample_changed_again,dictionary_to_use)\n                print sample_changed_again\n                break\n\n\n\nfill_in_the_blank()",
			"file": "fill-in-the-blanks.py",
			"file_size": 6620,
			"file_write_time": 131074419533732985,
			"settings":
			{
				"buffer_size": 4704,
				"line_ending": "Windows"
			}
		},
		{
			"file": "playground2.py",
			"settings":
			{
				"buffer_size": 274,
				"line_ending": "Windows"
			}
		},
		{
			"file": "playground.py",
			"settings":
			{
				"buffer_size": 2640,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 181.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/Stage 2 Project/fill-in-the-blanks.py",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/Stage 2 Project.sublime-project",
		"/C/Users/Eduardo/Downloads/Sessions.XML",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/find_element",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/file2",
		"/C/Users/Eduardo/Google Drive/udacity/Projects/tic-tac-toe/tic-tac-toe.py",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/word transformer",
		"/C/Users/Eduardo/Google Drive/udacity/Projects/tic-tac-toe/tic-tac-toe.sublime-project",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/nextDay.py",
		"/C/Users/Eduardo/Google Drive/github/stage1/DaysBetweenDays-Udacity Version",
		"/C/Users/Eduardo/Google Drive/github/stage1/DaysBetweenDays-V1",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/playground2.py",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/playground",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/tool.py",
		"/C/Users/Eduardo/AppData/Local/Temp/Rar$EXa0.744/NetIQ-IdentityManager-dev_20140610/SDK_README.html",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/2.6 starter code - FOR",
		"/C/Users/Eduardo/Google Drive/github/stage1/process madlib1",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/randint.py",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/median2",
		"/C/Users/Eduardo/Google Drive/github/stage1/2.6 starter code",
		"/C/Users/Eduardo/Google Drive/github/stage1/For Loop Playground",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/process madlib",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/2.1/file1.py",
		"/C/Users/Eduardo/Downloads/AON/eDirectory Monitor/eDir_health_check.sh",
		"/C/Users/Eduardo/Google Drive/github/stage1/index.html",
		"/C/Users/Eduardo/Google Drive/github/stage1/style.css",
		"/C/Users/Eduardo/Google Drive/github/stage1/.git/COMMIT_EDITMSG",
		"/C/Users/Eduardo/AppData/Local/GitHub/PortableGit_c7e0cbde92ba565cb218a521411d0e854079a28c/mingw32/share/doc/git-doc/git-push.html",
		"/C/Users/Eduardo/Google Drive/github/stage1/test.html",
		"/C/Users/Eduardo/Google Drive/github/stage1/.git/config",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/toplist/style.css",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/toplist/app.html",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/practice/style.css",
		"/C/Users/Eduardo/Google Drive/udacity/Portfolio/practice/index.html",
		"/C/Users/Eduardo/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Eduardo/Google Drive/udacity/css-demo/app.html",
		"/C/Users/Eduardo/Google Drive/udacity/css-demo/style.css",
		"/C/Users/Eduardo/Google Drive/udacity/css-demo/index.html",
		"/C/Users/Eduardo/Google Drive/udacity/stage1/style.css",
		"/C/Users/Eduardo/Google Drive/udacity/app.html",
		"/C/Users/Eduardo/Google Drive/udacity/stage1-worksession1.html",
		"/C/Users/Eduardo/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"return",
			"ExtraArgs=\"\"",
			"Hewitt-Webauth",
			"L4DSLDP8",
			"d2",
			"d1",
			"m2",
			"m1",
			"y2",
			"y1",
			"eDir",
			"Edir",
			"#EMAIL",
			"admin@company.com",
			"Edir1",
			"eDir1",
			"largest",
			"content"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"ExtraArgs=\"-pw #%$x#ndR$4\"",
			"Hewitt-Webauth-PROD-EXT",
			"L98SIPLD1410",
			"L98SIPLD1410\nL98SIPLD1410\nL98SIPLD1410\nL98SIPLD1410\nL98SIPLD1410\nL98SIPLD1410\nL98SIPLD1410",
			"day2",
			"day1",
			"month2",
			"month1",
			"year2",
			"year1",
			"$HOSTNAME",
			"$EMAIL",
			"#EMAIL",
			"$HOSTNAME",
			"text-content"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "fill-in-the-blanks.py",
					"settings":
					{
						"buffer_size": 4704,
						"regions":
						{
						},
						"selection":
						[
							[
								2584,
								2629
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "playground2.py",
					"settings":
					{
						"buffer_size": 274,
						"regions":
						{
						},
						"selection":
						[
							[
								224,
								224
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "playground.py",
					"settings":
					{
						"buffer_size": 2640,
						"regions":
						{
						},
						"selection":
						[
							[
								2639,
								2639
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 771.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 206.0
	},
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 212.0,
	"status_bar_visible": true
}
